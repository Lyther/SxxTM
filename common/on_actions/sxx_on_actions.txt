on_game_start = {
	events = {
		sxx_event.1
	}
}

on_game_start_country = {
	events = {
		sxx_origin.1
		sxx_crisis.10
	}
}

# Triggers when pressing begin in the intro window
# This = country to press begin
on_press_begin = {
	events = {
		sxx_origin.50
	}
}

on_monthly_pulse = {
	events = {
		sxx_event.110 # 阵法更新
		sxx_crisis.15 # 添加封印
		sxx_crisis.30 # 重建堕落空间站
		sxx_crisis.1150
		sxx_crisis.2021
	}
}

# this = country
on_monthly_pulse_country = {
	events = {
		sxx_break.1
		sxx_fairy.150 # 位面承载力
		sxx_event.100 # 更新修炼信息
		sxx_event.131 # 傀儡组装
		sxx_event.140 # 血丹师消耗血煞之力
	}
}

# No scope, like on_game_start
on_yearly_pulse = {
	events = {
		sxx_event.5
		sxx_event.125
		sxx_origin.20
		sxx_origin.30
		sxx_leader.10
		sxx_leader.15
		sxx_leader.100 # 进阶灵脉
		sxx_evil_invasion.100
		sxx_crisis.65
		sxx_crisis.1065
		sxx_ai.500
	}
}

# this = country
on_yearly_pulse_country = {
	events = {
		sxx_event.6
		sxx_fairy.170 # 迁移散仙
		sxx_break.100
		sxx_break.105
		sxx_ai.20
		sxx_ai.25
		sxx_ai.32
		sxx_ai.100
		sxx_ai.105
		sxx_ai.150
		sxx_ai.155
		sxx_ai.160
		sxx_ai.165
		sxx_ai.170
		sxx_ai.175
		sxx_ai.200
		sxx_ai.300
	}
}

# this = country
on_five_year_pulse_country = {
	events = {
		sxx_ai.50
		sxx_ai.51
		sxx_ai.52
		sxx_practice.2000
		sxx_other_event.1000
	}
	random_events = {
		#75 = 0 ?
		25 = sxx_precursor.10000	# Private Collector has an artifact (previously: MTTH 20 years)
		25 = sxx_precursor.10001	# Precursor Anomaly found (previously: MTTH 20 years)
		#25 = sxx_precursor.311	# Neighbor offers to sell an artifact (previously: MTTH 20 years)
		#25 = sxx_precursor.314	# Neighbor gifts an artifact (previously: MTTH 20 years)
	}
}

# No scope, like on_game_start
on_five_year_pulse = {
	events = {
		sxx_event.510
		sxx_fairy.500
	}
}

# No scope, like on_game_start
# Does not run when loading MP saves due to OOS concerns
on_single_player_save_game_load = {
	events = {
		sxx_event.5
	}
}

# A pop has finished growing
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_grown = {
	events = {
		sxx_event.20
		sxx_task.250
	}
}

# A pop has finished assembling
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_assembled = {
	events = {
		sxx_event.20
		sxx_task.260
	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		sxx_event.21
		sxx_task.30
	}
}

#Fired whenever a new owner is set for a planet,
#be it after a war or through a trade
#From = Country scope (new owner)
#This = Planet scope
on_planet_transfer = {
	events = {
		sxx_other_event.100 # 德罗
		sxx_ai.30 # ai血祭
	}
}

# Planet has been terraformed
# This = Planet
# From = Terraforming country
on_terraforming_complete = {
	events = {
		sxx_task.20
	}
}

#From = Planet/Starbase/Megastructure scope
#This = Fleet scope
on_fleet_enter_orbit = {
	events = {
		sxx_event.30 # 陆军登陆轰炸
		sxx_ai.11 # 升空防御
		sxx_other_world_intruder.10
		sxx_crisis.1100
	}
}

# a new leader is generated for an empire, to be available for recruitment
# scope: country, from: leader
on_leader_spawned = {
	events = {
		#sxx_event.200
	}
}

# Executed when a new heir is appointed
# This = Heir
on_new_heir = {
	events = {
		sxx_leader.5
	}
}

# Triggers when a Special Project to apply a species modification template has completed.
# Note that this will trigger once for each combination of planet & original species.
#
# This = Country
# From = Species ( Post Modification )
on_modification_complete = {
	events = {
		sxx_event.210
	}
}

# A fleet has entered a system | See also: on_fleet_auto_move_arrival
# Scope = Fleet
# From = System
on_entering_system_fleet = {
	events = {
		sxx_ai.10
		sxx_crisis.1055
	}
}

# Triggers when trying to open the diplomacy view for countries with custom diplomacy.
# Country scope
# This = target country (player)
# From = source country
on_custom_diplomacy = {
	events = {
		sxx_origin_system.2
	}
}

# Triggered when two empires discover each other
# This = Empire 1
# From = Empire 2
# Fromfromfrom = System where contact occurred
on_first_contact = {
	events = {
		sxx_crisis.21
	}
}

# Triggered when a first contact process is finished
# This = first contact scope
# From = other country
on_first_contact_finished = {
	events = {
		sxx_evil_invasion.5
	}
}

# A ship has surveyed a planet.
# Scope = Ship
# From = Planet
on_survey_planet = {
	random_events = {
		#100 = 0 ?
		6 = sxx_precursor.1		# 天鼎
		6 = sxx_precursor.201	# 万剑
		6 = sxx_precursor.401	# 禁神
		6 = sxx_precursor.601	# 修罗
		6 = sxx_precursor.801	# 观天
	}
}

# This = Aggressor Fleet
# From = Attacked Fleet
# FromFrom = Additional Attacked Fleet (if part of ongoing combat)
# FromFromFrom = Additional Attacked Fleet (if part of ongoing combat)
on_fleet_combat_joined_attacker = {
	events = {
	#	sxx_crisis.1800 # 未启用
	}
}

# This = Attacked Fleet
# From = Aggressor Fleet
# FromFrom = Additional Attacked Fleet (if joining ongoing combat)
# FromFromFrom = Additional Attacked Fleet (if joining ongoing combat)
on_fleet_combat_joined_defender = {
	events = {
	#	sxx_crisis.1800 # 未启用
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_victim = {
	events = {
		sxx_crisis.1500
		sxx_crisis.1900
		sxx_crisis.2020
	#	sxx_event.160
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_perp = {
	events = {
		sxx_crisis.1045
		sxx_other_event.60
		sxx_other_world_intruder.20
		sxx_leader.110
		sxx_task.80
		sxx_task.85
		sxx_task.90
		sxx_task.95
		sxx_task.100
		sxx_task.120
		sxx_task.130
		sxx_task.131
		sxx_task.132
		sxx_task.133
		sxx_task.134
		sxx_task.135
		sxx_task.136
		sxx_task.137
		sxx_task.138
		sxx_task.139
		sxx_task.140
	}
}

# This = starbase being destroyed (not ship!)
# From = fleet that destroyed the starbase
on_starbase_destroyed = {
	events = {
	#	sxx_crisis.1050
	}
}

#This = destroyed country
#From = optional, destroyer (country)
on_country_destroyed = {
	events = {
		sxx_crisis.2000
		sxx_task.65
		sxx_task.67
		sxx_task.70
		sxx_task.71
		sxx_task.72
		sxx_task.73
		sxx_task.74
	}
}

# A war has been won
# Root = Winner Warleader
# From = Loser Warleader
# FromFrom = War
on_war_won = {
	events = {
		sxx_task.50
		sxx_task.60
	}
}

#A building construction has been completed.
# This = Planet
on_building_complete = {
	events = {
		sxx_event.130
	}
}

# A building construction has been completed, which is an upgrade of previous building.
# This = Planet
on_building_upgraded = {
	events = {
		sxx_event.130
	}
}

# A ship has been built
# Root = Ship
# From = Planet
on_ship_built = {
	events = {
		sxx_event.25
	}
}

# A fleet has entered a system | See also: on_fleet_auto_move_arrival
# Scope = Fleet
# From = System
on_entering_system_fleet = {
	events = {
		sxx_event.500
	}
}

# THIS = Ship
on_jump_drive = {
	events = {
		sxx_crisis.2045
	}
}

# Executed just as country is changing its government, before the new one is applied
# THIS = country
on_pre_government_changed = {
	events = {
		sxx_event.105
	}
}

# Executed just as country is changing its government, after the new one is applied
# THIS = country
on_post_government_changed = {
	events = {
		sxx_event.106
		sxx_event.132 # 添加组装傀儡科技
	}
}

# fires when a country releases a sector as a vassal
# This = released vassal
# From = overlord
on_released_as_vassal = {
	events = {
		sxx_event.150
	}
}

# scope有问题，this好像是工程船，from错误
on_building_starbase_fe_outpost = {
	events = {
		sxx_crisis.35
	}
}

on_arch_site_finished = {
	events = {
		sxx_task.200
	}
}


# Scope:
# this/root = planet that have been fired upon
# from = fleet that fired
#on_destroy_planet_with_PLANET_DESTRUCTION_COMPONENT = {
#	events = {
#		planet_destruction.1
#	}
#}

# Note: The _queued on_actions also fire when the command is made even if there is nothing else in the queue
# Similarly, the _unqueued on_actions fire even if you cancel the order while the weapon is on the wind-up to fire
# They use the same scopes as the standard events

on_destroy_planet_with_PLANET_KILLER_STAR_CRACKER_SXX_FAIRY = {
	events = {
		sxx_other_event.1100
		sxx_task.270
		sxx_planet_destruction.1
	}
}

on_destroy_planet_with_PLANET_KILLER_STAR_CRACKER_SXX = {
	events = {
		sxx_other_event.1100
		sxx_task.270
		sxx_planet_destruction.1
	}
}

on_destroy_planet_with_PLANET_KILLER_CRACKER_SXX = {
	events = {
		sxx_other_event.1100
		sxx_task.270
		sxx_planet_destruction.5
	}
}

on_destroy_planet_with_PLANET_KILLER_NEUTRON_SXX = {
	events = {
		sxx_other_event.1100
		sxx_task.270
		sxx_planet_destruction.10
	}
}